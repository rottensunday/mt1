
// ==========================================================================
//  GPPG error listing for yacc source file <gen_predef.y - 24.06.2020 20:54:35>
// ==========================================================================
//  Version:  1.5.2
//  Machine:  DESKTOP-CA52FU6
//  DateTime: 24.06.2020 20:55:13
//  UserName: rotten
// ==========================================================================


%namespace GardensPoint
%start program
%partial

%YYSTYPE Node

%token Print Exit Assign Plus Minus Multiplies Divides OpenPar ClosePar Endl Eof Error OpenBracket CloseBracket Program Ident Type RealNumber IntNumber Semicolon Write String Bool If While LogicalOR LogicalAND LogicalNEG

%%
// Error: There are 1 non-terminating NonTerminal Symbols
   //  {expr}
// Warning: Terminating expr fixes the following size-1 NonTerminal set
   // {expr}
// Error: NonTerminal symbol "expr" has no productions
// --------------------------------------------------------------------

program
		: Program OpenBracket bracketstmt CloseBracket
		;

bracketstmt
		: /*empty*/
		| bracketstmt stmt
		;

stmt 
		: Ident Assign expr_logical Semicolon
			{
				MakeAssignNode($1, $3);
			}
		| Type Ident Semicolon
			{
				Declare($2, $1);
			}
		| If OpenPar expr_logical ClosePar 
			{
				MakeIfStmtNode($3);
			}
		  stmt
			{
				PopBracketStatement();
			}
		| While OpenPar expr_logical ClosePar
			{
				MakeWhileStmtNode($3);
			}
		  stmt
			{
				PopBracketStatement();
			}
		| Write String Semicolon
			{
				MakeWriteStringNode($2);
			}
		| Write expr_logical Semicolon
			{
				MakeWriteExpressionNode($2);
			}
		| OpenBracket 
			{
				PushBracketStatement();
			}
		  bracketstmt
			{
			
			}
		  CloseBracket
			{
				PopBracketStatement();
			}
		;

expr_logical
		: expr_relation
		;

expr_relation
		: expr_additive
		;

expr_additive
		: expr_additive Plus expr_multiplicative
			{
				$$ = new BinaryOperationNode($1, $3, Tokens.Plus);
			}
		| expr_additive Minus expr_multiplicative
			{
				$$ = new BinaryOperationNode($1, $3, Tokens.Minus);
			}
		| expr_multiplicative
			{
				$$ = $1;
			}
		;

expr_multiplicative
		: expr_multiplicative Multiplies expr_bit
			{
				$$ = new BinaryOperationNode($1, $3, Tokens.Multiplies);
			}
		| expr_multiplicative Divides expr_bit
			{
				$$ = new BinaryOperationNode($1, $3, Tokens.Divides);
			}
		| expr_bit
			{
				$$ = $1;
			}
		;

expr_bit
		: expr_unary
		;

expr_unary
		: factor
		;

factor
		: OpenPar expr ClosePar
			{
				$$ = $2;
			}
		| IntNumber
			{
				$$ = $1;
			}
		| RealNumber
			{
				$$ = $1;
			}
		| Bool
			{
				$$ = $1;
			}
		| Ident
			{
				$$ = $1;
			}
		;

%%

int lineno=1;

public Parser(Scanner scanner) : base(scanner) { }// ==========================================================================

